Index: backend/src/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express from 'express';\r\nimport dotenv from 'dotenv';\r\nimport axios from 'axios';\r\nimport cors from 'cors';  // Import cors\r\nimport { fileURLToPath } from 'url';\r\nimport path from 'path';\r\n\r\n// Get the current file path and directory in an ES module\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\n// Load environment variables from .env file\r\ndotenv.config({ path: path.resolve(__dirname, '../../.env') });\r\n\r\n// Initialize Express\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\nconst openaiApiKey = process.env.REACT_APP_OPENAI_API_KEY;\r\n\r\n// Enable CORS for requests from http://localhost:3000\r\napp.use(cors({\r\n    origin: 'http://localhost:3000'\r\n}));\r\n\r\n// Middleware to parse JSON\r\napp.use(express.json());\r\n\r\n// Root route to verify the server is running\r\napp.get('/', (req, res) => {\r\n    res.send('SmartBudget Backend Server is running');\r\n});\r\n\r\n// Route to fetch financial advice from OpenAI\r\napp.post('/api/get-financial-advice', async (req, res) => {\r\n    try {\r\n        const { income } = req.body;\r\n        if (!income) {\r\n            return res.status(400).json({ error: \"Income is required\" });\r\n        }\r\n\r\n        const messages = [\r\n            { role: \"system\", content: \"You are a financial advisor.\" },\r\n            { role: \"user\", content: `Provide budget recommendations for a user with an income of ${income}. Suggest ideal spending on essentials, savings, and discretionary expenses.` }\r\n        ];\r\n\r\n        // Make request to OpenAI API using the /v1/chat/completions endpoint\r\n        const response = await axios.post(\r\n            'https://api.openai.com/v1/chat/completions',\r\n            {\r\n                model: 'gpt-4o-mini', // Use a chat-based model such as gpt-3.5-turbo or gpt-4\r\n                messages: messages,\r\n                max_tokens: 200,\r\n                temperature: 0.7,\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${openaiApiKey}`,\r\n                },\r\n            }\r\n        );\r\n\r\n        // Extract advice from the OpenAI response\r\n        const advice = response.data.choices[0]?.message?.content.trim();\r\n        if (!advice) {\r\n            throw new Error(\"No advice generated from OpenAI API\");\r\n        }\r\n\r\n        res.status(200).json({ advice });\r\n    } catch (error) {\r\n        console.error(\"Error fetching financial advice:\", error.response ? error.response.data : error.message);\r\n        res.status(500).json({ error: 'Failed to retrieve financial advice' });\r\n    }\r\n});\r\n\r\n// Start the server\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on http://localhost:${PORT}`);\r\n});
===================================================================
diff --git a/backend/src/index.js b/backend/src/index.js
--- a/backend/src/index.js	(revision 64a5c45c7c8df112e9b78142f83a21cbf55edf05)
+++ b/backend/src/index.js	(date 1730478876784)
@@ -47,7 +47,7 @@
         const response = await axios.post(
             'https://api.openai.com/v1/chat/completions',
             {
-                model: 'gpt-4o-mini', // Use a chat-based model such as gpt-3.5-turbo or gpt-4
+                model: 'gpt-4o-mini', // Use gpt-4o-mini for faster responses and cost-effective pricing
                 messages: messages,
                 max_tokens: 200,
                 temperature: 0.7,
